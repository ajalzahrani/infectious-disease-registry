datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Patient {
  id          String     @id @default(cuid())
  mrn         String     @unique
  name        String
  age         Int
  gender      String
  contactInfo String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  registries  Registry[]
  relatives   Relative[]
  activites   Activity[]
}

model Disease {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  registries  Registry[]
}

model Registry {
  id          String    @id @default(cuid())
  patient     Patient   @relation(fields: [patientId], references: [id])
  patientId   String
  disease     Disease   @relation(fields: [diseaseId], references: [id])
  diseaseId   String
  contacted   Boolean   @default(false)
  contactDate DateTime?
  comments    String?   // Add this field
  registeredBy User     @relation("RegisteredBy", fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
}

model Relative {
  id             String   @id @default(cuid())
  patient        Patient  @relation(fields: [patientId], references: [id])
  patientId      String
  relativeName   String
  relation       String
  relativeContact String
  createdAt      DateTime @default(now())
}


model Activity {
  id          String    @id @default(cuid())
  description String
  type        String    
  patient     Patient?   @relation(fields: [patientId], references: [id])
  patientId   String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String          @unique
  password      String
  role          String
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  // Business
  registries   Registry[] @relation("RegisteredBy")
  activites    Activity[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}